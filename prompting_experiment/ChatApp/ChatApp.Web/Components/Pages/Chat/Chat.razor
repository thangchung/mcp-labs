@page "/"
@using System.ComponentModel
@using Microsoft.SemanticKernel.ChatCompletion
@using ModelContextProtocol
@using ModelContextProtocol.Client
@using ModelContextProtocol.Protocol.Transport
@using ModelContextProtocol.Protocol.Types
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div>To get started, try asking about these example documents. You can replace these with your own data and replace this message.</div>
        <ChatCitation File="Example_Emergency_Survival_Kit.pdf"/>
        <ChatCitation File="Example_GPS_Watch.pdf"/>
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    @* <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" /> *@
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
    <SurveyPrompt /> @* Remove this line to eliminate the template survey message *@
</div>

@code {
    private const string SystemPrompt = @"
        You are an assistant who answers questions about information you retrieve.

        Use tools you have to find relevant information.
        ";

    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;
    private IMcpClient? McpClient;

    protected override async Task OnInitializedAsync()
    {
        McpClient = await McpClientFactory.CreateAsync(
            // clientTransport: new StdioClientTransport(new()
            //     {
            //         Command = @"..\..\..\..\ChatApp.SampleMCPServer\bin\Debug\net9.0\ChatApp.SampleMCPServer.exe",
            //         Name = "MCPServer",
            //     }));
            clientTransport: new SseClientTransport(new SseClientTransportOptions()
            {
                Endpoint = new Uri("http://localhost:5066/sse"),
            }),
            clientOptions: new McpClientOptions()
            {
                Capabilities = new ClientCapabilities
                {
                    Sampling = new SamplingCapability
                    {
                        SamplingHandler = InvokeHandlerAsync
                    },
                },
            }
        );

        var tools = await McpClient.ListToolsAsync();

        chatOptions.Tools = [.. tools];

        messages.Add(new(ChatRole.System, SystemPrompt));

        await base.OnInitializedAsync();
    }

    @code {
        private async Task AddUserMessageAsync(ChatMessage userMessage)
        {
            CancelAnyCurrentResponse();

            // Add the user message to the conversation
            messages.Add(userMessage);
            chatSuggestions?.Clear();
            await chatInput!.FocusAsync();

            // Stream and display a new response from the IChatClient
            var responseText = new Microsoft.Extensions.AI.TextContent(""); // Specify the namespace explicitly
            currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
            currentResponseCancellation = new();
            await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
            {
                messages.AddMessages(update, filter: c => c is not Microsoft.Extensions.AI.TextContent); // Specify the namespace explicitly
                responseText.Text += update.Text;
                ChatMessageItem.NotifyChanged(currentResponseMessage);
            }

            // Store the final response in the conversation, and begin getting suggestions
            messages.Add(currentResponseMessage!);
            currentResponseMessage = null;
            chatSuggestions?.Update(messages);
        }
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.FileName}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    public void Dispose()
    {
        McpClient?.DisposeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
        currentResponseCancellation?.Cancel();
    }

    private async ValueTask<CreateMessageResult> InvokeHandlerAsync(CreateMessageRequestParams? request, IProgress<ProgressNotificationValue> progress, CancellationToken cancellationToken)
    {
        if (request is null)
        {
            throw new ArgumentNullException(nameof(request));
        }

        var concatContent = request.Messages.Aggregate(" ", (x, y) => x + y.Content.Text);
        var convertMsg = new ChatMessage(ChatRole.Assistant, concatContent);

        var result = await ChatClient.GetResponseAsync([convertMsg], chatOptions, cancellationToken: cancellationToken);

        return new CreateMessageResult
        {
            Content = new Content { Text = result.Text },
            Model = "test-model",
            Role = Role.User,
            StopReason = "endTurn"
        };
    }
}
